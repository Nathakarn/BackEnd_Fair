// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  user_id       Int         @id @default(autoincrement())
  username      String      @unique @db.VarChar(20)
  password      String      @db.VarChar(72)
  email         String      @db.VarChar(99)
  picture       String      @default("https://res.cloudinary.com/dkd5jblv5/image/upload/v1675976806/Default_ProfilePicture_gjngnb.png")
  status        String      @default("Hey there ! I am using whatsapp")
  phone_number  String      @db.VarChar(10)
  profile_pic   String?     @map("img_url")
  order         Order[]      //เพิ่ม By.Q
  cart          Cart[]      //เพิ่ม By.Q
  store         Store[]      //add By.NUT
  review        Review[]     //add by.win
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  verificationToken String? @unique //add by tao
  verified          Boolean  @default(false) //add by tao

  // Relations
  conversations UserConversation[]
  messages      Message[]
  adminOf       Conversation[] @relation("AdminRelation")
}


///--------qqqq
model Address {
  address_id Int     @id @default(autoincrement())
  name       String? @db.VarChar(70)
  address    String? @db.VarChar(300)
  province   String? @db.VarChar(300)
  district   String? @db.VarChar(10)
  code       String? @db.VarChar(5)
  phone      String? @db.VarChar(10)
  email      String? @db.VarChar(99)
  order     Order[] 
}

model Order {
  order_id        Int     @id @default(autoincrement())
  payment_status  Status  @default(PENDING)
  shipping_status Status  @default(PENDING)
  payment_method  String? @db.VarChar(100)
  address_id      Int?
  address         Address? @relation(fields: [address_id], references: [address_id])
  user_id         Int?
  user            User?    @relation(fields: [user_id], references: [user_id])
  cart_id         Int?      
  cart            Cart[]
  product         Product[] 
  review          Review[] // add by win
}

enum Status {
  PENDING
  COMPLETED
  FAILED
}

model Cart {
  cart_id         Int         @id @default(autoincrement())
  user_id         Int
  user            User        @relation(fields: [user_id], references: [user_id])
  order_id        Int
  order           Order       @relation(fields: [order_id], references: [order_id])

  cartitem_id         Int
  cartitem        CartItem[]    
}

model CartItem {
  cartitem_id  Int      @id @default(autoincrement())
  product_id   Int
  product      Product  @relation(fields: [product_id], references: [product_id])
  quantity     Int

  cart_id      Int  
  cart         Cart    @relation(fields: [cart_id], references: [cart_id])
}

//------qq-end

//-------nut
model Store {
  store_id          Int         @id @default(autoincrement())
  opening_date      DateTime    @db.Date
  store_name        String      @unique @db.VarChar(30)
  store_description String      @db.Text
  store_profilepic  String?     @map("profile_img_url")
  store_cover       String?     @map("cover_img_url")
  user_id           Int
  user              User        @relation(fields: [user_id], references: [user_id])
  products          Product[]
}

model Product {
  product_id       Int         @id @default(autoincrement())
  product_title    String      @unique @db.VarChar(30)
  description      String      @db.Text
  price            Float       @db.Float
  real_price       Float       @db.Float
  category         String
  product_pic      String?      @map("product_pic_url")
  product_video    String?      @map("product_video_url")
  product_type     ProductType
  store_id         Int
  store            Store       @relation(fields: [store_id], references: [store_id])
  
  cartitem_id      Int          //เพิ่ม By.Q
  cartItems        CartItem[]   //เพิ่ม By.Q

  order            Order? @relation(fields: [order_id], references: [order_id])  //เพิ่ม By.Qแก้ไขลบs
  order_id         Int?       //เพิ่ม By.Q
  review          Review[] // add by win
}

enum ProductType {
  Normal
  PreOrder
}

//-------nut-end


//-----------------------------------Mix-----------------------------------
model Conversation {
  id              Int      @id @default(autoincrement())
  username        String
  picture         String
  isGroup         Boolean  @default(false)
  latestMessage   Message? @relation("LatestMessageRelation", fields: [latestMessageId], references: [id])
  latestMessageId Int? @unique
  admin           User?    @relation("AdminRelation", fields: [adminId], references: [user_id])
  adminId         Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  users    UserConversation[]
  messages Message[] @relation("ConversationMessages")
}

model Message {
  id             Int            @id @default(autoincrement())
  sender         User?          @relation(fields: [senderId], references: [user_id])
  senderId       Int?
  message        String
  conversation   Conversation?  @relation("ConversationMessages", fields: [conversationId], references: [id])
  conversationId Int?
  files          Json
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relation
  latestMessageOf Conversation? @relation("LatestMessageRelation")
}

model UserConversation {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [user_id])
  userId         Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int

  @@unique([userId, conversationId])
}

//--------- win -----------// 
model Review {
  review_id Int    @id @default(autoincrement())
  content   String @db.Text
  rating    Int
  
  order_id  Int
  order     Order?       @relation(fields: [order_id], references: [order_id])

  product_id Int
  product   Product?     @relation(fields: [product_id], references : [product_id])

  user_id Int
  user     User?         @relation(fields: [user_id], references: [user_id])
}

// ---------- win -------------//