// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
//qq
model Address {
  address_id Int     @id @default(autoincrement())
  name       String  @db.VarChar(70)
  address    String  @db.VarChar(300)
  province   String  @db.VarChar(300)
  district   String  @db.VarChar(10)
  phone      String  @db.VarChar(10)
  email      String? @db.VarChar(99)
  orders     Order[] // Relation to Order model
}

model Order {
  order_id        Int           @id @default(autoincrement())
  payment_status  String        @db.VarChar(100)
  shipping_status String        @db.VarChar(100)
  payment_method  String        @db.VarChar(100)
  address_id      Int
  user_id         Int
  product_id      Int
  address         Address       @relation(fields: [address_id], references: [address_id])
}
//qq

model Product {
  product_id       Int         @id @default(autoincrement())
  product_title    String      @unique @db.VarChar(30)
  description      String      @db.Text
  price            Float       @db.Float
  wholesaler_price Float       @db.Float
  category         String
  product_pic      String      @map("product_pic_url")
  product_video    String      @map("product_video_url")
  product_type     ProductType 
  stores           Store[]
  orders           Order[]
}

enum ProductType {
  Normal
  PreOrder
}



//-----------------------------------Mix-----------------------------------
model Message {
  id             Int            @id @default(autoincrement())
  sender         User?          @relation(fields: [senderId], references: [id])
  senderId       Int?
  message        String
  conversation   Conversation?  @relation("ConversationMessages", fields: [conversationId], references: [id])
  conversationId Int?
  files          Json
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relation
  latestMessageOf Conversation? @relation("LatestMessageRelation")
}

model UserConversation {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int

  @@unique([userId, conversationId])
}
//-----------------------------------Mix----------------------------------